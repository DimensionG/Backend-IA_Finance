const Groq = require("groq-sdk");

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY
});

// Respuestas predefinidas como respaldo
const backupResponses = {
  analysis: {
    noTransactions: `üìä **An√°lisis Financiero B√°sico**

Hola! Veo que est√°s comenzando con tu gesti√≥n financiera. Aqu√≠ tienes algunos consejos iniciales:

üîç **Para empezar:**
1. Registra todos tus ingresos y gastos diariamente
2. Clasifica cada transacci√≥n en categor√≠as espec√≠ficas
3. Establece un presupuesto mensual realista

üí° **Pr√≥ximos pasos:**
- Una vez tengas m√°s datos, podr√© darte an√°lisis m√°s detallados
- Revisa tus gastos recurrentes (suscripciones, servicios, etc.)
- Identifica oportunidades de ahorro

¬°Sigue registrando tus transacciones para obtener insights m√°s personalizados!`,

    withTransactions: (totals, expensesByCategory, incomeByCategory) => {
      const balance = totals.balance || 0;
      const income = totals.income || 0;
      const expenses = totals.expenses || 0;
      
      let analysis = `üìà **An√°lisis de tus Finanzas**\n\n`;
      
      if (balance > 0) {
        analysis += `‚úÖ **Excelente trabajo!** Tienes un balance positivo de $${balance.toFixed(2)}\n`;
      } else {
        analysis += `‚ö†Ô∏è **Atenci√≥n:** Tu balance es negativo ($${Math.abs(balance).toFixed(2)}). Revisa tus gastos.\n`;
      }
      
      if (Object.keys(expensesByCategory).length > 0) {
        analysis += `\nüìâ **Tus mayores gastos:**\n`;
        Object.entries(expensesByCategory)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 3)
          .forEach(([category, amount]) => {
            analysis += `- ${category}: $${amount.toFixed(2)}\n`;
          });
      }
      
      analysis += `\nüí° **Recomendaciones:**\n`;
      analysis += `‚Ä¢ Revisa tus gastos en categor√≠as no esenciales\n`;
      analysis += `‚Ä¢ Establece metas de ahorro mensuales\n`;
      analysis += `‚Ä¢ Considera crear un fondo de emergencia\n`;
      
      return analysis;
    }
  },

  prediction: `üîÆ **Predicci√≥n Financiera**

Basado en patrones comunes, aqu√≠ hay algunas proyecciones:

üìÖ **Pr√≥ximo mes:**
‚Ä¢ Gastos esenciales: Mantendr√°n tendencia similar
‚Ä¢ Gastos variables: Depender√°n de tus h√°bitos
‚Ä¢ Oportunidades de ahorro: Revisa suscripciones no utilizadas

üí° **Consejos proactivos:**
1. Revisa tus gastos recurrentes mensuales
2. Planifica compras importantes con anticipaci√≥n
3. Establece un monto objetivo de ahorro`,

  tips: `üí° **Consejos Financieros Pr√°cticos**

1. **Regla 50/30/20:**
   ‚Ä¢ 50% para necesidades esenciales
   ‚Ä¢ 30% para gustos personales  
   ‚Ä¢ 20% para ahorro e inversi√≥n

2. **Fondo de emergencia:**
   ‚Ä¢ Objetivo: 3-6 meses de gastos
   ‚Ä¢ Comienza con un monto peque√±o y constante

3. **Revisa suscripciones:**
   ‚Ä¢ Cancela servicios que no uses regularmente
   ‚Ä¢ Busca planes m√°s econ√≥micos

4. **Planifica compras:**
   ‚Ä¢ Evita compras impulsivas
   ‚Ä¢ Investiga antes de compras grandes

¬°Peque√±os cambios generan grandes resultados a largo plazo! üöÄ`
};

class AIService {
  // An√°lisis de gastos y recomendaciones con Groq
  static async analyzeSpending(transactions, financialSummary) {
    try {
      // Verificar si tenemos API key de Groq
      if (!process.env.GROQ_API_KEY || process.env.GROQ_API_KEY === 'tu_groq_api_key_aqui') {
        return this.getBackupAnalysis(transactions, financialSummary);
      }

      const prompt = this.createAnalysisPrompt(transactions, financialSummary);
      
      const response = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Eres un experto asesor financiero personal. Analiza los patrones de gastos e ingresos y proporciona recomendaciones pr√°cticas y espec√≠ficas para mejorar la salud financiera. S√© directo pero constructivo. Responde en espa√±ol."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama3-8b-8192", // Modelo r√°pido y econ√≥mico de Groq
        temperature: 0.7,
        max_tokens: 1024,
        stream: false
      });

      return response.choices[0].message.content;
    } catch (error) {
      console.error('Error en an√°lisis con Groq, usando respaldo:', error.message);
      return this.getBackupAnalysis(transactions, financialSummary);
    }
  }

  // Predicci√≥n de gastos futuros con Groq
  static async predictFutureSpending(transactions) {
    try {
      if (!process.env.GROQ_API_KEY || process.env.GROQ_API_KEY === 'tu_groq_api_key_aqui') {
        return backupResponses.prediction;
      }

      const prompt = this.createPredictionPrompt(transactions);
      
      const response = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Eres un predictor financiero. Analiza patrones hist√≥ricos y predice gastos futuros bas√°ndote en datos pasados. S√© conservador en tus estimaciones. Responde en espa√±ol."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama3-8b-8192",
        temperature: 0.5,
        max_tokens: 512,
        stream: false
      });

      return response.choices[0].message.content;
    } catch (error) {
      console.error('Error en predicci√≥n con Groq, usando respaldo:', error.message);
      return backupResponses.prediction;
    }
  }

  // Consejos financieros con Groq
  static async getFinancialTips(totals) {
    try {
      if (!process.env.GROQ_API_KEY || process.env.GROQ_API_KEY === 'tu_groq_api_key_aqui') {
        return backupResponses.tips;
      }

      const prompt = `
Bas√°ndote en esta situaci√≥n financiera:
- Balance actual: $${totals.balance || 0}
- Ingresos mensuales: $${totals.income || 0}
- Gastos mensuales: $${totals.expenses || 0}

Proporciona 3-5 consejos financieros pr√°cticos y espec√≠ficos para mejorar esta situaci√≥n.
Enf√≥cate en acciones concretas que pueda implementar inmediatamente.

Responde en espa√±ol de manera clara y directa.
      `;

      const response = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Eres un coach financiero pr√°ctico. Das consejos espec√≠ficos, accionables y f√°ciles de implementar. Responde en espa√±ol."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama3-8b-8192",
        temperature: 0.7,
        max_tokens: 512,
        stream: false
      });

      return response.choices[0].message.content;
    } catch (error) {
      console.error('Error generando consejos con Groq, usando respaldo:', error.message);
      return backupResponses.tips;
    }
  }

  // An√°lisis de respaldo (se mantiene igual)
  static getBackupAnalysis(transactions, financialSummary) {
    if (transactions.length === 0) {
      return backupResponses.analysis.noTransactions;
    }

    const expensesByCategory = {};
    const incomeByCategory = {};
    
    transactions.forEach(transaction => {
      if (transaction.type === 'expense') {
        expensesByCategory[transaction.category] = (expensesByCategory[transaction.category] || 0) + parseFloat(transaction.amount);
      } else {
        incomeByCategory[transaction.category] = (incomeByCategory[transaction.category] || 0) + parseFloat(transaction.amount);
      }
    });

    const totals = financialSummary?.totals || {
      income: 0,
      expenses: 0,
      balance: 0
    };

    return backupResponses.analysis.withTransactions(totals, expensesByCategory, incomeByCategory);
  }

  // Crear prompt para el an√°lisis (se mantiene igual)
  static createAnalysisPrompt(transactions, financialSummary) {
    const lastMonthTransactions = transactions.slice(0, 30);
    
    const expensesByCategory = {};
    const incomeByCategory = {};
    
    lastMonthTransactions.forEach(transaction => {
      if (transaction.type === 'expense') {
        expensesByCategory[transaction.category] = (expensesByCategory[transaction.category] || 0) + parseFloat(transaction.amount);
      } else {
        incomeByCategory[transaction.category] = (incomeByCategory[transaction.category] || 0) + parseFloat(transaction.amount);
      }
    });

    const totals = financialSummary?.totals || {
      income: 0,
      expenses: 0,
      balance: 0
    };

    return `
Analiza los siguientes datos financieros y proporciona recomendaciones espec√≠ficas:

RESUMEN FINANCIERO:
- Ingresos totales: $${totals.income || 0}
- Gastos totales: $${totals.expenses || 0}
- Balance: $${totals.balance || 0}

GASTOS POR CATEGOR√çA:
${Object.entries(expensesByCategory).length > 0 
  ? Object.entries(expensesByCategory).map(([category, amount]) => `- ${category}: $${amount}`).join('\n')
  : '- No hay gastos registrados'
}

INGRESOS POR CATEGOR√çA:
${Object.entries(incomeByCategory).length > 0 
  ? Object.entries(incomeByCategory).map(([category, amount]) => `- ${category}: $${amount}`).join('\n')
  : '- No hay ingresos registrados'
}

√öLTIMAS TRANSACCIONES (m√°ximo 10):
${lastMonthTransactions.slice(0, 10).length > 0 
  ? lastMonthTransactions.slice(0, 10).map(t => 
      `- ${t.date}: ${t.description} - $${t.amount} (${t.category})`
    ).join('\n')
  : '- No hay transacciones recientes'
}

Por favor analiza:
1. Patrones de gasto problem√°ticos
2. Oportunidades de ahorro
3. Recomendaciones espec√≠ficas para mejorar
4. Alertas si hay gastos excesivos en alguna categor√≠a

Responde en espa√±ol de manera clara y pr√°ctica.
    `;
  }

  static createPredictionPrompt(transactions) {
    const lastThreeMonths = transactions.filter(t => {
      const transactionDate = new Date(t.date);
      const threeMonthsAgo = new Date();
      threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
      return transactionDate >= threeMonthsAgo;
    });

    return `
Bas√°ndote en estos datos hist√≥ricos de los √∫ltimos 3 meses, predice los gastos probables para el pr√≥ximo mes:

TRANSACCIONES HIST√ìRICAS (√∫ltimos 3 meses):
${lastThreeMonths.length > 0 
  ? lastThreeMonths.map(t => 
      `- ${t.date}: ${t.type === 'expense' ? 'GASTO' : 'INGRESO'} - ${t.category}: $${t.amount}`
    ).join('\n')
  : 'No hay transacciones hist√≥ricas suficientes para an√°lisis'
}

Proporciona:
1. Estimaci√≥n de gastos totales para el pr√≥ximo mes
2. Categor√≠as que probablemente tendr√°n mayor gasto
3. Recomendaciones para prepararse financieramente

Responde en espa√±ol de manera concisa.
    `;
  }
}

module.exports = AIService;